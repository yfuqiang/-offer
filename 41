class MedianFinder {
public:
   priority_queue<int> maxHeap; //默认大根堆
   priority_queue<int,vector<int>,greater<int>> minHeap; //小根堆额外声明
   int c = 0;

public:
    void addNum(int num)
    {
        if(c & 1 ) //总共已经插入奇数个元素
        {
            // 再插入一个就变成了偶数个了，要保证两个堆的大小相同/
            // 所以应该把小顶堆中小的，放到大顶堆中去
            minHeap.push(num);
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
        else
        {
            maxHeap.push(num);
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
        ++c;
    }

    double findMedian()
    {
        if(minHeap.empty() && maxHeap.empty())
            return INT_MIN;
        return c & 1 ? minHeap.top() : (maxHeap.top()+minHeap.top())*0.5;
    }

};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
