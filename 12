class Solution {
public:
   
    bool exist(vector<vector<char>>& board, string word) {
        int i,j;
        k={{1,0},{-1,0},{0,1},{0,-1}};
        for(i=0;i<board.size();i++)
        {
            for(j=0;j<board[0].size();j++)
            {
                if(board[i][j]==word[0])
                {
                    set<pair<int,int>> s;
                    s.insert({i,j});
                    if(dfs(board,i,j,s,1,word))
                    return true;
                }
            }
        }
        return false;
    }

    bool dfs(vector<vector<char>>& board,int i,int j, set<pair<int,int>> s,int count,string word)
    {
        if(i<0||i>=board.size()||j<0||j>=board[0].size())
        return false;
        if(count==word.size())
        return true;
        for(int m=0;m<4;m++)
        {
            set<pair<int,int>> ss;
            ss=s;
            if(i+k[m][0]<0||i+k[m][0]>=board.size()||j+k[m][1]<0||j+k[m][1]>=board[0].size())
            continue;
            if(board[i+k[m][0]][j+k[m][1]]==word[count])
            {
                if(ss.count({i+k[m][0],j+k[m][1]}))
                continue;
                ss.insert({i+k[m][0],j+k[m][1]});
                if(dfs(board,i+k[m][0],j+k[m][1],ss,count+1,word))
                return true;
                
            }
        }
        return false;
    }
     vector<vector<int>> k;
};
