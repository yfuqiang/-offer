class Solution {
public:
    int nthUglyNumber(int n) {
        int p2=0,p3=0,p5=0;
        vector<int> dp(n);
        int count=1;
        dp[0]=1;
        long minn=1;
        while(count<n)
        {
            
            minn=min(dp[p2]*2,min(dp[p3]*3,dp[p5]*5));
            dp[count]=minn;
            if(minn==dp[p2]*2)
            p2++;
             if(minn==dp[p3]*3)
            p3++;
             if(minn==dp[p5]*5)
            p5++;
            count++;
        }
        return dp[n-1];

    }
};


/*class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> dp(n, 0);
        dp[0] = 1;
        int p2 = 0, p3 = 0, p5 = 0;
        for(int i = 1; i < n; i ++){
            dp[i] = min(min(dp[p2]*2, dp[p3]*3), dp[p5]*5);
            if(dp[i] == dp[p2]*2) p2++;
            if(dp[i] == dp[p3]*3) p3++;
            if(dp[i] == dp[p5]*5) p5++;
        }
        return dp[n - 1];
    }
};*/
